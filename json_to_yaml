#!/usr/bin/python
import sys
import yaml
import json 
import os 
import sys
import collections

def construct_yaml_map(self, node):
    data = collections.OrderedDict()
    yield data
    value = self.construct_mapping(node)
    data.update(value)

def construct_mapping(self, node, deep=False):
    if isinstance(node, yaml.MappingNode):
        self.flatten_mapping(node)
    else:
        msg = 'expected a mapping node, but found %s' % node.id
        raise yaml.constructor.ConstructError(None, None, msg, node.start_mark)

    mapping = collections.OrderedDict()

    for key_node, value_node in node.value:

        key = self.construct_object(key_node, deep=deep)

        try:
            hash(key)
        except TypeError as err:
            raise yaml.constructor.ConstructError(
                'while constructing a mapping', node.start_mark,
                'found unacceptable key (%s)' % err, key_node.start_mark)

        value = self.construct_object(value_node, deep=deep)

        mapping[key] = value

    return mapping

def represent_ordereddict(self, data):
    return self.represent_mapping('tag:yaml.org,2002:map', data.items())

class OrdereddictYaml():
    class Loader(yaml.Loader):
        def __init__(self, *args, **kwargs):
            yaml.Loader.__init__(self, *args, **kwargs)

            self.add_constructor(
                'tag:yaml.org,2002:map', type(self).construct_yaml_map)
            self.add_constructor(
                'tag:yaml.org,2002:omap', type(self).construct_yaml_map)

        construct_yaml_map = construct_yaml_map
        construct_mapping = construct_mapping

    class SafeLoader(yaml.SafeLoader):
        def __init__(self, *args, **kwargs):
            yaml.SafeLoader.__init__(self, *args, **kwargs)

            self.add_constructor(
                'tag:yaml.org,2002:map', type(self).construct_yaml_map)
            self.add_constructor(
                'tag:yaml.org,2002:omap', type(self).construct_yaml_map)

        construct_yaml_map = construct_yaml_map
        construct_mapping = construct_mapping


    class Dumper(yaml.Dumper):
        def __init__(self, *args, **kwargs):
            yaml.Dumper.__init__(self, *args, **kwargs)
            self.add_representer(collections.OrderedDict, type(self).represent_ordereddict)

        represent_ordereddict = represent_ordereddict

    class SafeDumper(yaml.SafeDumper):
        def __init__(self, *args, **kwargs):
            yaml.SafeDumper.__init__(self, *args, **kwargs)
            self.add_representer(collections.OrderedDict, type(self).represent_ordereddict)

        represent_ordereddict = represent_ordereddict

args = sys.argv

if len(args) != 2:
    print "Wrong arguments, please enter input json file."
    sys.exit(2)
else:
    json_file = args[1]



temp_file = "/tmp/temp_json_to_yml.yml"

cnt = str(open(json_file).read())

data = json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode(cnt)

yaml.dump(data, open(temp_file, "w"), Dumper=OrdereddictYaml().Dumper, default_flow_style=False)

cnt = str(open(temp_file).read())

os.remove(temp_file)

lines = cnt.replace("!!python/unicode ", "").split("\n")

ret = ""

for line in lines:
    xline = line.split(":")

    if len(xline) > 1:
        line = xline[0].replace("'", "") + ":" + ":".join(xline[1:])

    if len(line) > 1:
        if line[-1] == ":":
           ret += "\n"

    ret += line

    ret += "\n"

print ret
